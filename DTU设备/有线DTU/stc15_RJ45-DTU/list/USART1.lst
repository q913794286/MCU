C51 COMPILER V9.01   USART1                                                                01/30/2019 15:31:55 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE USART1
OBJECT MODULE PLACED IN .\list\USART1.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE stclib\USART1.C LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\stclib;..\stc_li
                    -b;.\app;.\app\service\app;.\app\service\AES128;.\app\service\CRC16) DEBUG OBJECTEXTEND PRINT(.\list\USART1.lst) TABS(2) 
                    -OBJECT(.\list\USART1.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          
  15          #include "USART1.h"
  16          #include "function.h"
  17          
  18          /*************** 装载串口发送缓冲 *******************************/
  19          COMx_Define COM1,COM2;
  20          u8 xdata TX1_Buffer[COM_TX1_Lenth]; //发送缓冲
  21          u8 xdata RX1_Buffer[COM_RX1_Lenth]; //接收缓冲
  22          
  23          u8 xdata TX2_Buffer[COM_TX2_Lenth]; //发送缓冲
  24          u8 xdata RX2_Buffer[COM_RX2_Lenth]; //接收缓冲
  25          
  26          
  27          
  28          
  29          //u8 RecBuf[20];
  30          u8 rec,count;
  31          u8 Rec_over;
  32          volatile uint8_t uart1_cmd;
  33          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  34          {
  35   1        u8  i;
  36   1        u32 j;
  37   1        
  38   1        if(UARTx == USART1)
  39   1        {
  40   2          COM1.id = 1;
  41   2          COM1.TX_read    = 0;
  42   2          COM1.TX_write   = 0;
  43   2          COM1.B_TX_busy  = 0;
  44   2          COM1.RX_Cnt     = 0;
  45   2          COM1.RX_TimeOut = 0;
  46   2          COM1.B_RX_OK    = 0;
  47   2          uart1_cmd   = 0;
  48   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  49   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  50   2      
  51   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //模式错误
  52   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  53   2          else                  PS = 0; //低优先级中断
C51 COMPILER V9.01   USART1                                                                01/30/2019 15:31:55 PAGE 2   

  54   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  55   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  56   2          {
  57   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  58   3            if(j >= 65536UL)  return 2; //错误
  59   3            j = 65536UL - j;
  60   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  61   3            {
  62   4              TR1 = 0;
  63   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  64   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  65   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  66   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  67   4              TH1 = (u8)(j>>8);
  68   4              TL1 = (u8)j;
  69   4              ET1 = 0;  //禁止中断
  70   4              TMOD &= ~0x40;  //定时
  71   4              INT_CLKO &= ~0x02;  //不输出时钟
  72   4              TR1  = 1;
  73   4            }
  74   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  75   3            {
  76   4              AUXR &= ~(1<<4);  //Timer stop
  77   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  78   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  79   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  80   4              TH2 = (u8)(j>>8);
  81   4              TL2 = (u8)j;
  82   4              IE2  &= ~(1<<2);  //禁止中断
  83   4              AUXR &= ~(1<<3);  //定时
  84   4              AUXR |=  (1<<4);  //Timer run enable
  85   4            }
  86   3            else return 2;  //错误
  87   3          }
  88   2          else if(COMx->UART_Mode == UART_ShiftRight)
  89   2          {
  90   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  91   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  92   3          }
  93   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  94   2          {
  95   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  96   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  97   3          }
  98   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  99   2          else                ES = 0; //禁止中断
 100   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
 101   2          else                REN = 0;  //禁止接收
 102   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
 103   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 104   2          else                  PCON2 &= ~(1<<4);
 105   2          return  0;
 106   2        }
 107   1      
 108   1        if(UARTx == USART2)
 109   1        {
 110   2          COM2.id = 2;
 111   2          COM2.TX_read    = 0;
 112   2          COM2.TX_write   = 0;
 113   2          COM2.B_TX_busy  = 0;
 114   2          COM2.RX_Cnt     = 0;
 115   2          COM2.RX_TimeOut = 0;
C51 COMPILER V9.01   USART1                                                                01/30/2019 15:31:55 PAGE 3   

 116   2          COM2.B_RX_OK    = 0;
 117   2          for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 118   2          for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 119   2      
 120   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 121   2          {
 122   3            if(COMx->UART_Polity == PolityHigh)   IP2 |=  1;  //高优先级中断
 123   3            else                  IP2 &= ~1;  //低优先级中断
 124   3            if(COMx->UART_Mode == UART_9bit_BRTx) S2CON |=  (1<<7); //9bit
 125   3            else                  S2CON &= ~(1<<7); //8bit
 126   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 127   3            if(j >= 65536UL)  return 2; //错误
 128   3            j = 65536UL - j;
 129   3            AUXR &= ~(1<<4);  //Timer stop
 130   3            AUXR &= ~(1<<3);  //Timer2 set As Timer
 131   3            AUXR |=  (1<<2);  //Timer2 set as 1T mode
 132   3            TH2 = (u8)(j>>8);
 133   3            TL2 = (u8)j;
 134   3            IE2  &= ~(1<<2);  //禁止中断
 135   3            AUXR |=  (1<<4);  //Timer run enable
 136   3          }
 137   2          else  return 2; //模式错误
 138   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  1;    //允许中断
 139   2          else                IE2   &= ~1;    //禁止中断
 140   2          if(COMx->UART_RxEnable == ENABLE) S2CON |=  (1<<4); //允许接收
 141   2          else                S2CON &= ~(1<<4); //禁止接收
 142   2          P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);  //切换IO
 143   2        }
 144   1        return 3; //其它错误
 145   1      }
 146          
 147          uint8_t temp;
 148          /********************* UART1中断函数************************/
 149          void UART1_int (void) interrupt UART1_VECTOR using 1
 150          {
 151   1        u8 buf;
 152   1         static uint8_t cmd_flg=0;
 153   1        
 154   1          if(RI)
 155   1        {
 156   2          RI = 0;
 157   2            if(COM1.B_RX_OK == 0)
 158   2            {   
 159   3              if(uart1_cmd == 0)
 160   3            { 
 161   4              uart1_set_TimeOut(200);   //200ms未收到数据则接收结束
 162   4            }
 163   3             buf= SBUF;
 164   3              if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 165   3      
 166   3              RX1_Buffer[COM1.RX_Cnt++] = buf;
 167   3              COM1.RX_TimeOut = TimeOutSet1;
 168   3      
 169   3              
 170   3            
 171   3            switch(buf)
 172   3            {
 173   4              case 'M': cmd_flg = 1; COM1.RX_Cnt = 0; break;
 174   4              case 'U': if(cmd_flg == 1 && COM1.RX_Cnt == 1){uart1_cmd = 1; cmd_flg = 0; COM1.RX_Cnt = 0;} break; //
             -进入配置模式
 175   4      
 176   4              case 'S': cmd_flg = 2; COM1.RX_Cnt = 0; break;
C51 COMPILER V9.01   USART1                                                                01/30/2019 15:31:55 PAGE 4   

 177   4              case 'X': if(cmd_flg == 2 && COM1.RX_Cnt == 1){uart1_cmd = 2; cmd_flg = 0; COM1.RX_Cnt = 0;} break;  /
             -/单片机配置
 178   4      
 179   4      //        case 'G': cmd_flg = 3; COM1.RX_Cnt = 0; break;
 180   4      //        case 'Y': if(cmd_flg == 3 && COM1.RX_Cnt == 1){uart1_cmd = 3; cmd_flg = 0; COM1.RX_Cnt = 0;} break; 
             - //GPRS机配置
 181   4      
 182   4              case 'Q': cmd_flg = 4; COM1.RX_Cnt = 0; break;
 183   4              case 'Z': if(cmd_flg == 4 && COM1.RX_Cnt == 1){uart1_cmd = 4; cmd_flg = 0; COM1.RX_Cnt = 0;} break; //
             -退出单片机配置模式
 184   4              
 185   4            }       
 186   3      
 187   3          
 188   3          }
 189   2        }
 190   1      //==============免断电下载命令 af af af af af 7f=========================
 191   1            if(SBUF == 0xaf)
 192   1            {        
 193   2               temp ++;
 194   2            }
 195   1                  if(temp==5)
 196   1                  {
 197   2                      if(SBUF == 0x7f)
 198   2                      {
 199   3                          ISP_CONTR = 0x60;
 200   3                          temp = 0;
 201   3                      }
 202   2            }
 203   1      //=====================================================================       
 204   1        if(TI)
 205   1        {
 206   2          TI = 0;
 207   2      //    if(COM1.TX_read != COM1.TX_write)
 208   2      //    {
 209   2      //      SBUF = TX1_Buffer[COM1.TX_read];
 210   2      //      if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 211   2      //    }
 212   2      //    else  
 213   2          COM1.B_TX_busy = 0;
 214   2        }
 215   1      }
 216          
 217          /********************* UART2中断函数************************/
 218          void UART2_int (void) interrupt UART2_VECTOR using 2
 219          {
 220   1        if(RI2)
 221   1        {
 222   2          CLR_RI2();
 223   2          if(COM2.B_RX_OK == 0)  //确认串口已经初始化
 224   2          {
 225   3            uart2_set_TimeOut(200); //200ms未收到数据则接收结束
 226   3            if(COM2.RX_Cnt >= COM_RX2_Lenth)  COM2.RX_Cnt = 0; //为防止内存溢出，接收缓存溢出时清零
 227   3            RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 228   3            COM2.RX_TimeOut = TimeOutSet2;
 229   3          }
 230   2        }
 231   1      
 232   1        if(TI2)
 233   1        {
 234   2          CLR_TI2();
 235   2      //    if(COM2.TX_read != COM2.TX_write)
C51 COMPILER V9.01   USART1                                                                01/30/2019 15:31:55 PAGE 5   

 236   2      //    {
 237   2      //      S2BUF = TX2_Buffer[COM2.TX_read];
 238   2      //      if(++COM2.TX_read >= COM_TX2_Lenth)   COM2.TX_read = 0;
 239   2      //    }
 240   2      //    else
 241   2            COM2.B_TX_busy = 0;
 242   2        }
 243   1      
 244   1      }
 245          
 246          void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
 247          {
 248   1      //  TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
 249   1      //  if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 250   1      //
 251   1      //  if(COM1.B_TX_busy == 0)   //空闲
 252   1      //  {  
 253   1      //    COM1.B_TX_busy = 1;   //标志忙
 254   1      //    TI = 1;         //触发发送中断
 255   1      //  }
 256   1        while(COM1.B_TX_busy);
 257   1        COM1.B_TX_busy = 1;
 258   1        SBUF = dat;
 259   1      }
 260          
 261          void PrintString1(u8 *puts)
 262          {
 263   1          for (; *puts != 0;  puts++) TX1_write2buff(*puts);  //遇到停止符0结束
 264   1      }
 265          
 266          void Printf1(u8 *puts, u8 len)
 267          {
 268   1        u8 i;
 269   1        for( i=0;i<len;i++)
 270   1        {
 271   2          TX1_write2buff(puts[i]);
 272   2        }
 273   1      }
 274          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -/////////////////////////////
 275          void TX2_write2buff(u8 dat) //写入发送缓冲，指针+1
 276          { 
 277   1      //  TX2_Buffer[COM2.TX_write] = dat;  //装发送缓冲
 278   1      //  if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
 279   1      //
 280   1      //  if(COM2.B_TX_busy == 0)   //空闲
 281   1      //  {  
 282   1      //    COM2.B_TX_busy = 1;   //标志忙
 283   1      //    SET_TI2();        //触发发送中断
 284   1      //  }
 285   1        while(COM2.B_TX_busy);
 286   1        COM2.B_TX_busy = 1;
 287   1        S2BUF = dat;
 288   1      }
 289          
 290          void PrintString2(u8 *puts)
 291          {
 292   1          for (; *puts != 0;  puts++)  TX2_write2buff(*puts);   //遇到停止符0结束
 293   1      }
 294          
 295          void Printf2(u8 *puts, u8 len)
 296          {
C51 COMPILER V9.01   USART1                                                                01/30/2019 15:31:55 PAGE 6   

 297   1        u8 i;
 298   1        for( i=0;i<len;i++)
 299   1        {
 300   2        TX2_write2buff(puts[i]);
 301   2        }
 302   1      }
 303          
 304          
 305          
 306          
 307          
 308          
 309          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1398    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1040      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
