C51 COMPILER V9.01   FUNCTION                                                              01/30/2019 15:31:53 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FUNCTION
OBJECT MODULE PLACED IN .\list\function.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE app\service\app\function.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\stcli
                    -b;..\stc_lib;.\app;.\app\service\app;.\app\service\AES128;.\app\service\CRC16) DEBUG OBJECTEXTEND PRINT(.\list\function.
                    -lst) TABS(2) OBJECT(.\list\function.obj)

line level    source

   1          #include "config.h"
   2          #include "USART1.h"
   3          #include "delay.h"
   4          #include "GPIO.h"
   5          #include "eeprom.h"
   6          
   7          #include <stdio.h>
   8          #include <string.h>
   9          #include "sys_clock.h"
  10          #include "function.h"
  11          #include "aes.h"
  12          #include "aes128app.h"
  13          #include "crc16.h"
  14          
  15          #include "stc_timer.h"
  16          
  17          
  18          timer_out timerout1, timerout2;    //定义超时结构体
  19          AES128 aes128={ 
  20                  {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
  21                  {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c },
  22                      {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f 
             -}        
  23                  };
  24          
  25          
  26          //void uart_check_TimeOut(void);
  27          void usart1_cmd_write();
  28          void usart1_and_usart2();
  29          
  30          void function(void)
  31          {
  32   1       
  33   1        uint16_t timeconut;
  34   1        
  35   1        uart1_cmd = 0x5a; //命令接收
  36   1      
  37   1       
  38   1        EEPROM_read_n(0x00,RX2_Buffer,40);
  39   1        //Printf2(RX2_Buffer,40);     
  40   1        delay_ms(6);
  41   1        memcpy(aes128.key, &RX2_Buffer[0],16);
  42   1        memcpy(aes128.iv, &RX2_Buffer[16],16);
  43   1        memcpy(aes128.id, &RX2_Buffer[32],8);
  44   1      
  45   1        
  46   1        
  47   1        
  48   1        delay_ms(1000);
  49   1        if(PCON & 0x10)  //判断是上电复位进入配置模式 10s内未进行配置 ,则自动进入正常数据发送模式
  50   1          {
  51   2           printf("Enter configuration mode!\r\n");
  52   2           PCON &= ~0x10;
C51 COMPILER V9.01   FUNCTION                                                              01/30/2019 15:31:53 PAGE 2   

  53   2          do
  54   2          {
  55   3            timeconut = get_sys_ticks();  //读取当前计数
  56   3            if(uart1_cmd != 0x5a)
  57   3             {
  58   4               timeconut = 0;
  59   4            }  
  60   3      
  61   3           switch(uart1_cmd)
  62   3             {
  63   4              case 1: //Printf1("ok",2);    //进入配置模式
  64   4                     break; 
  65   4              case 2: 
  66   4                        usart1_cmd_write();   //进入参数单片机配置  
  67   4                        uart1_cmd = 0x55;         
  68   4                        printf("set up successfully");
  69   4                        break;
  70   4              case 3:   
  71   4      //                usart1_and_usart2();  //进入GPRS配置数据
  72   4      //                uart1_cmd = 0x55;   
  73   4      //                printf("set up successfully");
  74   4                        break;
  75   4              case 4:
  76   4                      uart1_cmd = 0;
  77   4                        break;
  78   4              default:
  79   4                        break;
  80   4                }
  81   3          }
  82   2          while((uart1_cmd != 0)&&(timeconut <= overtime)); //(uart1_cmd != 0)||
  83   2          uart1_cmd = 0; //命令接收
  84   2          PrintString1("Exit configuration mode");
  85   2        }
  86   1        while(1)
  87   1        {
  88   2         /*  uart1_cmd = 0 进入正常加密发数据
  89   2          *  uart1_cmd = 1 进入进入配置模式
  90   2          *  uart1_cmd = 2 进入单片机保存数据；
  91   2          *  uart1_cmd = 3 进入GPRS配置数据
  92   2          *  uart1_cmd = 4 退出配置模式  
  93   2          */
  94   2        
  95   2          
  96   2          //PrintString2("exit configuration");
  97   2          //delay_ms(1000);
  98   2            
  99   2            uart1_check_TimeOut();  //串口超时检测
 100   2            uart2_check_TimeOut(); 
 101   2          //  uint16_ start = get_sys_ticks();
 102   2      
 103   2          if(Reset_sign == 1)   
 104   2            {
 105   3              printf("CH9121 reset"); 
 106   3              delay_ms(3000);
 107   3              RESET_OFF;   //对CH9121复位
 108   3              Reset_sign = 0;
 109   3                  
 110   3            }
 111   2           
 112   2          
 113   2          
 114   2          
C51 COMPILER V9.01   FUNCTION                                                              01/30/2019 15:31:53 PAGE 3   

 115   2      //     switch(uart1_cmd)
 116   2      //     {
 117   2      //       case 0:  uart1_check_TimeOut();  //串口超时检测
 118   2      //                uart2_check_TimeOut();          
 119   2      //                break;
 120   2      //     case 1:  //Printf1("ok",2);    //进入配置模式
 121   2      //                break;
 122   2      //     case 2:  //usart1_cmd_write();   //进入参数单片机配置
 123   2      //              //uart1_cmd = 1;
 124   2      //          //Printf1("ok",2);
 125   2      //                break;
 126   2      //     case 3:  //usart1_and_usart2();  //进入GPRS配置数据
 127   2      //              break;
 128   2      //     case 4:  uart1_cmd = 0;
 129   2      //              break;
 130   2      //     }
 131   2        }
 132   1      }
 133          
 134          #if 1
 135          /*
 136          *串口接收超时设置
 137          * 功能：设置或刷新超时时间
 138          */
 139          void uart1_set_TimeOut(uint16_t ms)
 140          {
 141   1      
 142   1          timerout1.start = get_sys_ticks();
 143   1          timerout1.ms = ms;
 144   1      }
 145          
 146          void uart2_set_TimeOut(uint16_t ms)
 147          {
 148   1      
 149   1          timerout2.start = get_sys_ticks();
 150   1          timerout2.ms = ms;
 151   1      }
 152          
 153          
 154          
 155          
 156          
 157          
 158          
 159          
 160          
 161          
 162          
 163          /*
 164          *串口接收超时检测
 165          */
 166          u8 code sbuf1[]={0xc3,0x01};
 167          //u8 code cc[]={0xC3, 0x01, 
 168          //        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
 169          //        0x00, 0x10, 
 170          //        0x86, 0xE2, 0x93, 0x97, 0x4B, 0x38, 0x3F, 0xA5, 0x10, 0xF0, 0x76, 0xBF, 0xD8, 0x6E, 0x68, 0x72
 171          //        };
 172          void uart1_check_TimeOut(void)
 173          {
 174   1        
 175   1        uint16_t count1;
 176   1        uint8_t  tmp[20];
C51 COMPILER V9.01   FUNCTION                                                              01/30/2019 15:31:53 PAGE 4   

 177   1        uint16_t crc;
 178   1        uint16_t data_len;
 179   1          if(COM1.RX_TimeOut > 0)   //超时计数
 180   1          {
 181   2              count1 = get_sys_ticks();
 182   2              if((count1 - timerout1.start)>timerout1.ms)
 183   2              {
 184   3      //            COM1.RX_TimeOut = 0;  //接收超时清零
 185   3      //            COM1.RX_Cnt = 0;      //接收计数清零
 186   3                  /*
 187   3                   *串口1检测超时动作
 188   3                   *加密、封包串口2发送
 189   3                  */
 190   3                
 191   3            //app_encrypt_cbc(uint8_t *key, uint8_t *iv, uint8_t *in, uint8_t len, uint8_t *out);; //EBC加密
 192   3                  data_len = app_encrypt_cbc(aes128.key, aes128.iv, RX1_Buffer, COM1.RX_TimeOut-1, TX2_Buffer); 
             -  //加密返回数据长度RX2_Buffer  
 193   3      //      Printf1(RX2_Buffer,COM1.RX_TimeOut);  //data  
 194   3      
 195   3            tmp[0] = sbuf1[0];
 196   3            tmp[1] = sbuf1[1];
 197   3            memcpy(&tmp[2], aes128.id, 8);
 198   3            tmp[10] = (data_len>>8)&0xff;
 199   3            tmp[11] = data_len&0xff;
 200   3      
 201   3            crc = crc16_2(tmp, 12, TX2_Buffer, data_len);  
 202   3      
 203   3            Printf2(tmp,12);      //head cmd id(8B) len(2B)
 204   3            Printf2(TX2_Buffer,data_len);  //data
 205   3            TX2_write2buff((crc>>8)&0xff);    //crc
 206   3            TX2_write2buff(crc&0xff);     //crc
 207   3            TX2_write2buff(0xe7);       //end
 208   3      
 209   3            COM1.RX_TimeOut = 0;  //接收超时清零
 210   3            COM1.RX_Cnt = 0;      //接收计数清零
 211   3      
 212   3            
 213   3              }
 214   2          }
 215   1      }
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          
 224          
 225          
 226          void uart2_check_TimeOut(void)
 227          {
 228   1         uint16_t count2;
 229   1        
 230   1          if(COM2.RX_TimeOut > 0)   //超时计数
 231   1          {
 232   2              count2 = get_sys_ticks();
 233   2              if((count2 - timerout2.start)>timerout2.ms)
 234   2              {            
 235   3                  /*
 236   3                   *串口2检测超时动作
 237   3                   * 加密、封包串口2发送
C51 COMPILER V9.01   FUNCTION                                                              01/30/2019 15:31:53 PAGE 5   

 238   3                  */ 
 239   3              }
 240   2          }
 241   1      }
 242          #endif
 243          
 244          
 245          extern char putchar(char c);
 246          void usart1_cmd_write()
 247          {
 248   1      // static uint8_t  RX2_Buffer1[48];
 249   1      //  uint8_t  i;
 250   1      //void  EEPROM_write_n(uint16_t EE_address,uint8_t *DataAddress,uint16_t number);
 251   1      //void  EEPROM_SectorErase(uint16_t EE_address);
 252   1        
 253   1        
 254   1      
 255   1        memcpy(aes128.id, &RX1_Buffer[0], 8);
 256   1        memcpy(aes128.key, &RX1_Buffer[8], 16);
 257   1        memcpy(aes128.iv, &RX1_Buffer[24], 16);
 258   1      
 259   1        EEPROM_SectorErase(0x00);
 260   1        delay_ms(6);    //擦除时间4ms~6ms  
 261   1        EEPROM_write_n(0x00,&RX1_Buffer[0],40);   //uart1_cnt = 48Byte
 262   1        delay_ms(6);
 263   1        
 264   1        
 265   1      //  EEPROM_read_n(0x00,&RX2_Buffer1[0],40);
 266   1      //  for(i=0;i<48;i++)
 267   1      //  {
 268   1      //   Printf1("%s\n",RX2_Buffer1[i]);
 269   1      //  }
 270   1      //  COM1.RX_Cnt = 0;
 271   1      //  delay_ms(10); 
 272   1      //  Printf1("ok",2);
 273   1      //  ISP_CONTR = 0x60; //配置成功重启
 274   1      }
 275          
 276          sbit LED1 = P1^1;
 277          sbit LED2 = P1^2;
 278          sbit LED_state1 = P1^3;
 279          sbit GPIO_power = P1^4;
 280          
 281          void MCU_check(uint16_t check_time)
 282          {
 283   1        static uint16_t start_T;
 284   1        static uint8_t CT;
 285   1        if(CT == 0)
 286   1        {
 287   2          start_T = get_sys_ticks();
 288   2          CT = 1;
 289   2        }
 290   1      
 291   1        if((get_sys_ticks() - start_T)>check_time)
 292   1        {
 293   2          CT = 0;
 294   2          if((LED1 || LED2) == 1)
 295   2          {
 296   3            LED_state1 = 1;
 297   3            delay_ms(10000);
 298   3            LED_state1 = 0; 
 299   3          }
C51 COMPILER V9.01   FUNCTION                                                              01/30/2019 15:31:53 PAGE 6   

 300   2          else
 301   2          {
 302   3             GPIO_power = 1;
 303   3             delay_ms(2000);
 304   3             GPIO_power = 0;
 305   3          }
 306   2        } 
 307   1      }
 308          
 309          void usart1_and_usart2()
 310          {
 311   1        uint16_t i;
 312   1        if((COM1.RX_TimeOut > 0)&&(COM2.RX_TimeOut == 0))   //超时计数
 313   1        {
 314   2          if(--COM1.RX_TimeOut == 0)
 315   2          {
 316   3            if(COM1.RX_Cnt > 0)
 317   3            {
 318   4              for(i=0; i<COM1.RX_Cnt; i++)  TX2_write2buff(RX1_Buffer[i]);  //收到的数据原样返回
 319   4            }
 320   3            COM1.RX_Cnt = 0;
 321   3          }
 322   2        }
 323   1        if((COM2.RX_TimeOut > 0) && (COM1.RX_TimeOut == 0))   //超时计数
 324   1        {
 325   2          if(--COM2.RX_TimeOut == 0)
 326   2          {
 327   3            if(COM2.RX_Cnt > 0)
 328   3            {
 329   4              for(i=0; i<COM2.RX_Cnt; i++)  TX1_write2buff(RX2_Buffer[i]);  //收到的数据原样返回
 330   4            }
 331   3            COM2.RX_Cnt = 0;
 332   3          }
 333   2        }
 334   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1013    ----
   CONSTANT SIZE    =     87    ----
   XDATA SIZE       =     51      36
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
