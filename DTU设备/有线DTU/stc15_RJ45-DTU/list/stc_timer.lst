C51 COMPILER V9.01   STC_TIMER                                                             01/30/2019 15:31:55 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE STC_TIMER
OBJECT MODULE PLACED IN .\list\stc_timer.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE stclib\stc_timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\stclib;..\stc
                    -_lib;.\app;.\app\service\app;.\app\service\AES128;.\app\service\CRC16) DEBUG OBJECTEXTEND PRINT(.\list\stc_timer.lst) TA
                    -BS(2) OBJECT(.\list\stc_timer.obj)

line level    source

   1          
   2          /*************  功能说明  **************
   3          
   4          本文件为STC15xxx系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
   5          
   6          
   7          ******************************************/
   8          
   9          
  10          
  11          #include "stc_timer.h"
  12          #include <stdint.h>
  13          #include "usart1.h"
  14          #include <sys_clock.h>
  15          #include "gpio.h"
  16          
  17          
  18          
  19          uint8_t Reset_sign = 0;
  20          
  21          
  22          
  23          /********************* Timer0中断函数************************/ //10ms一次中断
  24          void timer0_int (void) interrupt TIMER0_VECTOR
  25          {
  26   1        static uint16_t  runcount = 0;  
  27   1        
  28   1        
  29   1        sys_ticks++;  //系统时钟
  30   1        
  31   1        
  32   1        if(CH9121_RUN == 0)   //检查运行脚状态
  33   1           {
  34   2          //  printf("1");  
  35   2             runcount++;
  36   2             if(runcount >= 500)
  37   2              {
  38   3              //  printf("%d\n",runcount);  
  39   3                RESET_ON;   //对CH9121复位
  40   3                runcount = 0;
  41   3                Reset_sign = 1;
  42   3          
  43   3             }         
  44   2           }
  45   1          else 
  46   1          {
  47   2            //printf("2");
  48   2            runcount = 0;
  49   2          }
  50   1          
  51   1        
  52   1        
  53   1      
C51 COMPILER V9.01   STC_TIMER                                                             01/30/2019 15:31:55 PAGE 2   

  54   1      }
  55          
  56          /********************* Timer1中断函数************************/
  57          void timer1_int (void) interrupt TIMER1_VECTOR
  58          {
  59   1      
  60   1      }
  61          
  62          /********************* Timer2中断函数************************/
  63          void timer2_int (void) interrupt TIMER2_VECTOR
  64          {
  65   1      
  66   1      
  67   1      }
  68          
  69          
  70          //========================================================================
  71          // 函数: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  72          // 描述: 定时器初始化程序.
  73          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  74          // 返回: 成功返回0, 空操作返回1,错误返回2.
  75          // 版本: V1.0, 2012-10-22
  76          //========================================================================
  77          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  78          {
  79   1        if(TIM > Timer2)  return 1; //空操作
  80   1      
  81   1        if(TIM == Timer0)
  82   1        {
  83   2          TR0 = 0;    //停止计数
  84   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //允许中断
  85   2          else                  ET0 = 0;  //禁止中断
  86   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //高优先级中断
  87   2          else                  PT0 = 0;  //低优先级中断
  88   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //错误
  89   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
  90   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
  91   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
  92   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //对外计数或分频
  93   2          else                    TMOD &= ~0x04;  //定时
  94   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;  //输出时钟
  95   2          else              INT_CLKO &= ~0x01;  //不输出时钟
  96   2          
  97   2          TH0 = (u8)(TIMx->TIM_Value >> 8);
  98   2          TL0 = (u8)TIMx->TIM_Value;
  99   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //开始运行
 100   2          return  0;    //成功
 101   2        }
 102   1      
 103   1        if(TIM == Timer1)
 104   1        {
 105   2          TR1 = 0;    //停止计数
 106   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //允许中断
 107   2          else                  ET1 = 0;  //禁止中断
 108   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //高优先级中断
 109   2          else                  PT1 = 0;  //低优先级中断
 110   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
 111   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 112   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
 113   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
 114   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //对外计数或分频
C51 COMPILER V9.01   STC_TIMER                                                             01/30/2019 15:31:55 PAGE 3   

 115   2          else                    TMOD &= ~0x40;  //定时
 116   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;  //输出时钟
 117   2          else              INT_CLKO &= ~0x02;  //不输出时钟
 118   2          
 119   2          TH1 = (u8)(TIMx->TIM_Value >> 8);
 120   2          TL1 = (u8)TIMx->TIM_Value;
 121   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //开始运行
 122   2          return  0;    //成功
 123   2        }
 124   1      
 125   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 126   1        {
 127   2          AUXR &= ~(1<<4);  //停止计数
 128   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //允许中断
 129   2          else                    IE2  &= ~(1<<2);  //禁止中断
 130   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 131   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
 132   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
 133   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //对外计数或分频
 134   2          else                    AUXR &= ~(1<<3);  //定时
 135   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;  //输出时钟
 136   2          else              INT_CLKO &= ~0x04;  //不输出时钟
 137   2      
 138   2          TH2 = (u8)(TIMx->TIM_Value >> 8);
 139   2          TL2 = (u8)TIMx->TIM_Value;
 140   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //开始运行
 141   2          return  0;    //成功
 142   2        }
 143   1        return 2; //错误
 144   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    488    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
