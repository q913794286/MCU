C51 COMPILER V9.01   USART                                                                 12/12/2018 16:22:27 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\list\USART.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE USART.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\USART.l
                    -st) TABS(2) OBJECT(.\list\USART.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          
  15          #include "USART.h"
  16          
  17          bit busy;
  18          COMx_Define COM1,COM2;
  19          u8  xdata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
  20          u8  xdata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
  21          u8  xdata TX2_Buffer[COM_TX2_Lenth];  //发送缓冲
  22          u8  xdata RX2_Buffer[COM_RX2_Lenth];  //接收缓冲
  23          
  24          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  25          {
  26   1        u8  i;
  27   1        u32 j;
  28   1        
  29   1        if(UARTx == USART1)
  30   1        {
  31   2          COM1.id = 1;
  32   2          COM1.TX_read    = 0;
  33   2          COM1.TX_write   = 0;
  34   2          COM1.B_TX_busy  = 0;
  35   2          COM1.RX_Cnt     = 0;
  36   2          COM1.RX_TimeOut = 0;
  37   2          COM1.B_RX_OK    = 0;
  38   2          busy=0;
  39   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  40   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  41   2      
  42   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //模式错误
  43   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  44   2          else                  PS = 0; //低优先级中断
  45   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  46   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  47   2          {
  48   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  49   3            if(j >= 65536UL)  return 2; //错误
  50   3            j = 65536UL - j;
  51   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  52   3            {
  53   4              TR1 = 0;
  54   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
C51 COMPILER V9.01   USART                                                                 12/12/2018 16:22:27 PAGE 2   

  55   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  56   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  57   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  58   4              TH1 = (u8)(j>>8);
  59   4              TL1 = (u8)j;
  60   4              ET1 = 0;  //禁止中断
  61   4              TMOD &= ~0x40;  //定时
  62   4              INT_CLKO &= ~0x02;  //不输出时钟
  63   4              TR1  = 1;
  64   4            }
  65   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  66   3            {
  67   4              AUXR &= ~(1<<4);  //Timer stop
  68   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  69   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  70   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  71   4              TH2 = (u8)(j>>8);
  72   4              TL2 = (u8)j;
  73   4              IE2  &= ~(1<<2);  //禁止中断
  74   4              AUXR &= ~(1<<3);  //定时
  75   4              AUXR |=  (1<<4);  //Timer run enable
  76   4            }
  77   3            else return 2;  //错误
  78   3          }
  79   2          else if(COMx->UART_Mode == UART_ShiftRight)
  80   2          {
  81   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  82   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  83   3          }
  84   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  85   2          {
  86   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  87   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  88   3          }
  89   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  90   2          else                ES = 0; //禁止中断
  91   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
  92   2          else                REN = 0;  //禁止接收
  93   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
  94   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  95   2          else                  PCON2 &= ~(1<<4);
  96   2          return  0;
  97   2        }
  98   1      
  99   1        if(UARTx == USART2)
 100   1        {
 101   2          COM2.id = 2;
 102   2          COM2.TX_read    = 0;
 103   2          COM2.TX_write   = 0;
 104   2          COM2.B_TX_busy  = 0;
 105   2          COM2.RX_Cnt     = 0;
 106   2          COM2.RX_TimeOut = 0;
 107   2          COM2.B_RX_OK    = 0;
 108   2          for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 109   2          for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 110   2      
 111   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 112   2          {
 113   3            if(COMx->UART_Polity == PolityHigh)   IP2 |=  1;  //高优先级中断
 114   3            else                  IP2 &= ~1;  //低优先级中断
 115   3            if(COMx->UART_Mode == UART_9bit_BRTx) S2CON |=  (1<<7); //9bit
 116   3            else                  S2CON &= ~(1<<7); //8bit
C51 COMPILER V9.01   USART                                                                 12/12/2018 16:22:27 PAGE 3   

 117   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 118   3            if(j >= 65536UL)  return 2; //错误
 119   3            j = 65536UL - j;
 120   3            AUXR &= ~(1<<4);  //Timer stop
 121   3            AUXR &= ~(1<<3);  //Timer2 set As Timer
 122   3            AUXR |=  (1<<2);  //Timer2 set as 1T mode
 123   3            TH2 = (u8)(j>>8);
 124   3            TL2 = (u8)j;
 125   3            IE2  &= ~(1<<2);  //禁止中断
 126   3            AUXR |=  (1<<4);  //Timer run enable
 127   3          }
 128   2          else  return 2; //模式错误
 129   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  1;    //允许中断
 130   2          else                IE2   &= ~1;    //禁止中断
 131   2          if(COMx->UART_RxEnable == ENABLE) S2CON |=  (1<<4); //允许接收
 132   2          else                S2CON &= ~(1<<4); //禁止接收
 133   2          P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);  //切换IO
 134   2        }
 135   1      }
 136          
 137          
 138          /*************** 装载串口发送缓冲 *******************************/
 139          
 140          void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
 141          {
 142   1          TI=0;
 143   1          while(busy);
 144   1          COM1.B_TX_busy = 1;   //标志忙
 145   1          SBUF = dat;
 146   1          
 147   1      }
 148          
 149          void TX2_write2buff(u8 dat) //写入发送缓冲，指针+1
 150          {
 151   1        TX2_Buffer[COM2.TX_write] = dat;  //装发送缓冲
 152   1        if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
 153   1      
 154   1        if(COM2.B_TX_busy == 0)   //空闲
 155   1        {  
 156   2          COM2.B_TX_busy = 1;   //标志忙
 157   2          SET_TI2();        //触发发送中断
 158   2        }
 159   1      }
 160          
 161          void PrintString1(u8 *p)
 162          {
 163   1           while (*p)
 164   1          {
 165   2              TX1_write2buff(*p++);
 166   2          } //遇到停止符0结束
 167   1      }
 168          
 169          void PrintString2(u8 *puts)
 170          {
 171   1          for (; *puts != 0;  puts++)  TX2_write2buff(*puts);   //遇到停止符0结束
 172   1      }
 173          
 174          /*
 175          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
 176          {
 177            if(COMx->id == 1) TX1_write2buff(dat);
 178            if(COMx->id == 2) TX2_write2buff(dat);
C51 COMPILER V9.01   USART                                                                 12/12/2018 16:22:27 PAGE 4   

 179          }
 180          
 181          void PrintString(COMx_Define *COMx, u8 *puts)
 182          {
 183              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
 184          }
 185          */
 186          
 187          
 188          /********************* UART1中断函数************************/
 189          void UART1_int (void) interrupt UART1_VECTOR
 190          {
 191   1        if(RI)
 192   1        {
 193   2          RI = 0;
 194   2          if(COM1.B_RX_OK == 0)
 195   2          {
 196   3            if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 197   3            RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 198   3            COM1.RX_TimeOut = TimeOutSet1;
 199   3          }
 200   2        }
 201   1      
 202   1        if(TI)
 203   1        {
 204   2          TI = 0;
 205   2          COM1.B_TX_busy = 0;
 206   2        }
 207   1      }
 208          
 209          /********************* UART2中断函数************************/
 210          void UART2_int (void) interrupt UART2_VECTOR
 211          {
 212   1        if(RI2)
 213   1        {
 214   2          CLR_RI2();
 215   2          if(COM2.B_RX_OK == 0)
 216   2          {
 217   3            if(COM2.RX_Cnt >= COM_RX2_Lenth)  COM2.RX_Cnt = 0;
 218   3            RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 219   3            COM2.RX_TimeOut = TimeOutSet2;
 220   3          }
 221   2        }
 222   1      
 223   1        if(TI2)
 224   1        {
 225   2          CLR_TI2();
 226   2          if(COM2.TX_read != COM2.TX_write)
 227   2          {
 228   3            S2BUF = TX2_Buffer[COM2.TX_read];
 229   3            if(++COM2.TX_read >= COM_TX2_Lenth)   COM2.TX_read = 0;
 230   3          }
 231   2          else  COM2.B_TX_busy = 0;
 232   2        }
 233   1      
 234   1      }
 235          
 236          
 237          
*** WARNING C291 IN LINE 135 OF USART.C: not every exit path returns a value


C51 COMPILER V9.01   USART                                                                 12/12/2018 16:22:27 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1011    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    512    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
