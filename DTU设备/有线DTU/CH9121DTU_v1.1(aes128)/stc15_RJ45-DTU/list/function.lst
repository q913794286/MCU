C51 COMPILER V9.01   FUNCTION                                                              12/14/2018 12:39:04 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FUNCTION
OBJECT MODULE PLACED IN .\list\function.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil\C51\BIN\C51.EXE app\service\app\function.c LARGE BROWSE INCDIR(.\stclib
                    -;..\stc_lib;.\app;.\app\service\app;.\app\service\AES128;.\app\service\CRC16) DEBUG OBJECTEXTEND PRINT(.\list\function.l
                    -st) OBJECT(.\list\function.obj)

line level    source

   1          #include "config.h"
   2          #include "USART1.h"
   3          #include "delay.h"
   4          #include "GPIO.h"
   5          #include "eeprom.h"
   6          
   7          #include <stdio.h>
   8          #include <string.h>
   9          #include "sys_clock.h"
  10          #include "function.h"
  11          #include "aes.h"
  12          #include "aes128app.h"
  13          #include "crc16.h"
  14          
  15          timer_out timerout1, timerout2;          //定义超时结构体
  16          AES128 aes128={ 
  17                                          {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
  18                                          {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c },
  19                                      {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f 
             -}                                
  20                                          };
  21          
  22          
  23          //void uart_check_TimeOut(void);
  24          void usart1_cmd_write();
  25          void usart1_and_usart2();
  26          
  27          void function(void)
  28          {
  29   1              uart1_cmd = 0; //命令接收
  30   1      
  31   1              EEPROM_read_n(0x00,RX2_Buffer,48);
  32   1          delay_ms(6);
  33   1      //      memcpy(aes128.key, &RX2_Buffer[0],16);
  34   1      //      memcpy(aes128.iv, &RX2_Buffer[16],16);
  35   1      //      memcpy(aes128.id, &RX2_Buffer[32],16);
  36   1      
  37   1              while(1)
  38   1              {
  39   2               /*      uart1_cmd = 0 进入正常加密发数据
  40   2                *      uart1_cmd = 1 进入进入配置模式
  41   2                *  uart1_cmd = 2 进入单片机保存数据；
  42   2                *  uart1_cmd = 3 进入GPRS配置数据
  43   2                *  uart1_cmd = 4 退出配置模式  
  44   2                */
  45   2                 switch(uart1_cmd)
  46   2                 {
  47   3                       case 0:        uart1_check_TimeOut();  //串口超时检测
  48   3                                              uart2_check_TimeOut();                                  
  49   3                                              break;
  50   3                       case 1:        Printf1("ok",2);                //进入配置模式
  51   3                                              break;
  52   3                       case 2:        usart1_cmd_write();     //进入参数单片机配置
C51 COMPILER V9.01   FUNCTION                                                              12/14/2018 12:39:04 PAGE 2   

  53   3                                              Printf1("ok",2);
  54   3                                              break;
  55   3                       case 3:        usart1_and_usart2();    //进入GPRS配置数据
  56   3                                              break;
  57   3                       case 4:        uart1_cmd = 0;
  58   3                                              break;
  59   3                 }
  60   2              }
  61   1      }
  62          
  63          #if 1
  64          /*
  65          *串口接收超时设置
  66          * 功能：设置或刷新超时时间
  67          */
  68          void uart1_set_TimeOut(uint16_t ms)
  69          {
  70   1      
  71   1          timerout1.start = get_sys_ticks();
  72   1          timerout1.ms = ms;
  73   1      }
  74          
  75          void uart2_set_TimeOut(uint16_t ms)
  76          {
  77   1      
  78   1          timerout2.start = get_sys_ticks();
  79   1          timerout2.ms = ms;
  80   1      }
  81          
  82          /*
  83          *串口接收超时检测
  84          */
  85          //u8 code sbuf1[]={0xc3,0x01};
  86          //u8 code cc[]={0xC3, 0x01, 
  87          //                        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
  88          //                        0x00, 0x10, 
  89          //                        0x86, 0xE2, 0x93, 0x97, 0x4B, 0x38, 0x3F, 0xA5, 0x10, 0xF0, 0x76, 0xBF, 0xD8, 0x6E, 0x68, 0x72
  90          //                        };
  91          void uart1_check_TimeOut(void)
  92          {
  93   1          uint16_t count1;
  94   1              uint8_t  tmp[20];
  95   1              uint16_t crc;
  96   1              uint16_t data_len;
  97   1          if(COM1.RX_TimeOut > 0)             //超时计数
  98   1          {
  99   2              count1 = get_sys_ticks();
 100   2              if((count1 - timerout1.start)>timerout1.ms)
 101   2              {
 102   3      //            COM1.RX_TimeOut = 0;  //接收超时清零
 103   3      //            COM1.RX_Cnt = 0;            //接收计数清零
 104   3                  /*
 105   3                   *串口1检测超时动作
 106   3                   *加密、封包串口2发送
 107   3                  */
 108   3                              //app_encrypt_cbc(uint8_t *key, uint8_t *iv, uint8_t *in, uint8_t len, uint8_t *out);; //EBC加密
 109   3                  data_len = app_encrypt_cbc(aes128.key, aes128.iv, RX1_Buffer, COM1.RX_TimeOut-1, TX2_Buffer);       
             -  //加密返回数据长度RX2_Buffer        
 110   3      //                      Printf1(RX2_Buffer,COM1.RX_TimeOut);  //data    
 111   3      
 112   3      //                  tmp[0] = sbuf1[0];
 113   3      //                      tmp[1] = sbuf1[1];
C51 COMPILER V9.01   FUNCTION                                                              12/14/2018 12:39:04 PAGE 3   

 114   3                              memcpy(&tmp[2], aes128.id, 8);
 115   3                              tmp[10] = (data_len>>8)&0xff;
 116   3                              tmp[11] = data_len&0xff;
 117   3      
 118   3                              crc = crc16_2(tmp, 12, TX2_Buffer, data_len);  
 119   3      
 120   3                              Printf2(tmp,12);                        //head cmd id(8B) len(2B)
 121   3                              Printf2(TX2_Buffer,data_len);  //data
 122   3                              TX2_write2buff((crc>>8)&0xff);    //crc
 123   3                              TX2_write2buff(crc&0xff);                 //crc
 124   3                              TX2_write2buff(0xe7);                     //end
 125   3      
 126   3                              COM1.RX_TimeOut = 0;  //接收超时清零
 127   3                  COM1.RX_Cnt = 0;      //接收计数清零
 128   3              }
 129   2          }
 130   1      }
 131          
 132          void uart2_check_TimeOut(void)
 133          {
 134   1               uint16_t count2;
 135   1              
 136   1          if(COM2.RX_TimeOut > 0)             //超时计数
 137   1          {
 138   2              count2 = get_sys_ticks();
 139   2              if((count2 - timerout2.start)>timerout2.ms)
 140   2              {            
 141   3                  /*
 142   3                   *串口2检测超时动作
 143   3                   * 加密、封包串口2发送
 144   3                  */ 
 145   3              }
 146   2          }
 147   1      }
 148          #endif
 149          
 150          
 151          
 152          void usart1_cmd_write()
 153          {
 154   1      
 155   1      //void  EEPROM_write_n(uint16_t EE_address,uint8_t *DataAddress,uint16_t number);
 156   1      //void  EEPROM_SectorErase(uint16_t EE_address);
 157   1              memcpy(aes128.id, &RX1_Buffer[1], 8);
 158   1              memcpy(aes128.key, &RX1_Buffer[9], 16);
 159   1              memcpy(aes128.iv, &RX1_Buffer[25], 16);
 160   1      
 161   1              EEPROM_SectorErase(0x00);
 162   1              delay_ms(6);            //擦除时间4ms~6ms  
 163   1              EEPROM_write_n(0x00,&RX1_Buffer[1],COM1.RX_Cnt);          //uart1_cnt = 48Byte
 164   1              delay_ms(6);
 165   1              Printf1("ok",2);
 166   1      //      ISP_CONTR = 0x60; //配置成功重启
 167   1      }
 168          
 169          sbit LED1 = P1^1;
 170          sbit LED2 = P1^2;
 171          sbit LED_state1 = P1^3;
 172          sbit GPIO_power = P1^4;
 173          
 174          void MCU_check(uint16_t check_time)
 175          {
C51 COMPILER V9.01   FUNCTION                                                              12/14/2018 12:39:04 PAGE 4   

 176   1              static uint16_t start_T;
 177   1              static uint8_t CT;
 178   1              if(CT == 0)
 179   1              {
 180   2                      start_T = get_sys_ticks();
 181   2                      CT = 1;
 182   2              }
 183   1      
 184   1              if((get_sys_ticks() - start_T)>check_time)
 185   1              {
 186   2                      CT = 0;
 187   2                      if((LED1 || LED2) == 1)
 188   2                      {
 189   3                              LED_state1 = 1;
 190   3                              delay_ms(10000);
 191   3                              LED_state1 = 0; 
 192   3                      }
 193   2                      else
 194   2                      {
 195   3                         GPIO_power = 1;
 196   3                         delay_ms(2000);
 197   3                         GPIO_power = 0;
 198   3                      }
 199   2              }       
 200   1      }
 201          
 202          void usart1_and_usart2()
 203          {
 204   1              uint16_t i;
 205   1              if((COM1.RX_TimeOut > 0)&&(COM2.RX_TimeOut == 0))               //超时计数
 206   1              {
 207   2                      if(--COM1.RX_TimeOut == 0)
 208   2                      {
 209   3                              if(COM1.RX_Cnt > 0)
 210   3                              {
 211   4                                      for(i=0; i<COM1.RX_Cnt; i++)    TX2_write2buff(RX1_Buffer[i]);  //收到的数据原样返回
 212   4                              }
 213   3                              COM1.RX_Cnt = 0;
 214   3                      }
 215   2              }
 216   1              if((COM2.RX_TimeOut > 0) && (COM1.RX_TimeOut == 0))             //超时计数
 217   1              {
 218   2                      if(--COM2.RX_TimeOut == 0)
 219   2                      {
 220   3                              if(COM2.RX_Cnt > 0)
 221   3                              {
 222   4                                      for(i=0; i<COM2.RX_Cnt; i++)    TX1_write2buff(RX2_Buffer[i]);  //收到的数据原样返回
 223   4                              }
 224   3                              COM2.RX_Cnt = 0;
 225   3                      }
 226   2              }
 227   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    849    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =     51      34
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.01   FUNCTION                                                              12/14/2018 12:39:04 PAGE 5   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
