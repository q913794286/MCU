C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE AES
OBJECT MODULE PLACED IN .\list\aes.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil\C51\BIN\C51.EXE app\service\AES128\aes.c LARGE BROWSE INCDIR(.\stclib;.
                    -.\stc_lib;.\app;.\app\service\app;.\app\service\AES128;.\app\service\CRC16) DEBUG OBJECTEXTEND PRINT(.\list\aes.lst) OBJ
                    -ECT(.\list\aes.obj)

line level    source

   1          /*
   2          
   3          This is an implementation of the AES128 algorithm, specifically ECB and CBC mode.
   4          
   5          The implementation is verified against the test vectors in:
   6            National Institute of Standards and Technology Special Publication 800-38A 2001 ED
   7          
   8          ECB-AES128
   9          ----------
  10          
  11            plain-text:
  12              6bc1bee22e409f96e93d7e117393172a
  13              ae2d8a571e03ac9c9eb76fac45af8e51
  14              30c81c46a35ce411e5fbc1191a0a52ef
  15              f69f2445df4f9b17ad2b417be66c3710
  16          
  17            key:
  18              2b7e151628aed2a6abf7158809cf4f3c
  19          
  20            resulting cipher
  21              3ad77bb40d7a3660a89ecaf32466ef97 
  22              f5d3d58503b9699de785895a96fdbaaf 
  23              43b1cd7f598ece23881b00e3ed030688 
  24              7b0c785e27e8ad3f8223207104725dd4 
  25          
  26          
  27          NOTE:   String length must be evenly divisible by 16byte (str_len % 16 == 0)
  28                  You should pad the end of the string with zeros if this is not the case.
  29          
  30          */
  31          
  32          
  33          /*****************************************************************************/
  34          /* Includes:                                                                 */
  35          /*****************************************************************************/
  36          #include <stdint.h>
  37          #include <string.h> // CBC mode, for memset
  38          #include "aes.h"
  39          
  40          
  41          /*****************************************************************************/
  42          /* Defines:                                                                  */
  43          /*****************************************************************************/
  44          // Enable both ECB and CBC mode. Note this can be done before including aes.h or at compile-time.
  45          // E.g. with GCC by using the -D flag: gcc -c aes.c -DCBC=0 -DECB=1
  46          //#define CBC 1
  47          //#define ECB 0
  48          // The number of columns comprising a state in AES. This is a constant in AES. Value=4
  49          #define Nb 4
  50          // The number of 32 bit words in a key.
  51          #define Nk 4
  52          // Key length in bytes [128 bit]
  53          #define KEYLEN 16
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 2   

  54          // The number of rounds in AES Cipher.
  55          #define Nr 10
  56          
  57          // jcallan@github points out that declaring Multiply as a function 
  58          // reduces code size considerably with the Keil ARM compiler.
  59          // See this link for more information: https://github.com/kokke/tiny-AES128-C/pull/3
  60          #ifndef MULTIPLY_AS_A_FUNCTION
  61            #define MULTIPLY_AS_A_FUNCTION 0
  62          #endif
  63          
  64          
  65          /*****************************************************************************/
  66          /* Private variables:      ÏûºÄÄÚ´æ208B                                                  */
  67          /*****************************************************************************/
  68          // state - array holding the intermediate results during decryption.
  69          typedef uint8_t state_t[4][4];
  70          static state_t* state;
  71          
  72          // The array that stores the round keys.
  73          static uint8_t RoundKey[176];
  74          
  75          // The Key input to the AES Program
  76          static const uint8_t* Key;
  77          
  78          #if defined(CBC) && CBC
  79            // Initial Vector used only for CBC mode
  80            static uint8_t* Iv;
  81          #endif
  82          
  83          // The lookup-tables are marked const so they can be placed in read-only storage instead of RAM
  84          // The numbers below can be computed dynamically trading ROM for RAM - 
  85          // This can be useful in (embedded) bootloader applications, where ROM is often limited.
  86          const uint8_t code sbox[256] =   {
  87            //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  88            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  89            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  90            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  91            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  92            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  93            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  94            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  95            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  96            0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  97            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  98            0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  99            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
 100            0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
 101            0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
 102            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
 103            0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
 104          
 105          const uint8_t code rsbox[256] =
 106          { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
 107            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
 108            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
 109            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
 110            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
 111            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
 112            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
 113            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
 114            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
 115            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 3   

 116            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
 117            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
 118            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
 119            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
 120            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
 121            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
 122          
 123          
 124          // The round constant word array, Rcon[i], contains the values given by 
 125          // x to th e power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)
 126          // Note that i starts at 1, not 0).
 127          const uint8_t code Rcon[255] = {
 128            0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
 129            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
 130            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
 131            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
 132            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
 133            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
 134            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
 135            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
 136            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
 137            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
 138            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
 139            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
 140            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
 141            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
 142            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
 143            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb  };
 144          
 145          
 146          /*****************************************************************************/
 147          /* Private functions:                                                        */
 148          /*****************************************************************************/
 149          uint8_t getSBoxValue(uint8_t num)
 150          {
 151   1        return sbox[num];
 152   1      }
 153          
 154          static uint8_t getSBoxInvert(uint8_t num)
 155          {
 156   1        return rsbox[num];
 157   1      }
 158          
 159          // This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states
             -. 
 160          static void KeyExpansion(void)
 161          {
 162   1        uint32_t i, j, k;
 163   1        uint8_t tempa[4]; // Used for the column/row operations
 164   1        
 165   1        // The first round key is the key itself.
 166   1        for(i = 0; i < Nk; ++i)
 167   1        {
 168   2          RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 169   2          RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 170   2          RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 171   2          RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 172   2        }
 173   1      
 174   1        // All other round keys are found from the previous round keys.
 175   1        for(; (i < (Nb * (Nr + 1))); ++i)
 176   1        {
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 4   

 177   2          for(j = 0; j < 4; ++j)
 178   2          {
 179   3            tempa[j]=RoundKey[(i-1) * 4 + j];
 180   3          }
 181   2          if (i % Nk == 0)
 182   2          {
 183   3            // This function rotates the 4 bytes in a word to the left once.
 184   3            // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]
 185   3      
 186   3            // Function RotWord()
 187   3            {
 188   4              k = tempa[0];
 189   4              tempa[0] = tempa[1];
 190   4              tempa[1] = tempa[2];
 191   4              tempa[2] = tempa[3];
 192   4              tempa[3] = k;
 193   4            }
 194   3      
 195   3            // SubWord() is a function that takes a four-byte input word and 
 196   3            // applies the S-box to each of the four bytes to produce an output word.
 197   3      
 198   3            // Function Subword()
 199   3            {
 200   4              tempa[0] = getSBoxValue(tempa[0]);
 201   4              tempa[1] = getSBoxValue(tempa[1]);
 202   4              tempa[2] = getSBoxValue(tempa[2]);
 203   4              tempa[3] = getSBoxValue(tempa[3]);
 204   4            }
 205   3      
 206   3            tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 207   3          }
 208   2          else if (Nk > 6 && i % Nk == 4)
 209   2          {
 210   3            // Function Subword()
 211   3            {
 212   4              tempa[0] = getSBoxValue(tempa[0]);
 213   4              tempa[1] = getSBoxValue(tempa[1]);
 214   4              tempa[2] = getSBoxValue(tempa[2]);
 215   4              tempa[3] = getSBoxValue(tempa[3]);
 216   4            }
 217   3          }
 218   2          RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 219   2          RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 220   2          RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 221   2          RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 222   2        }
 223   1      }
 224          
 225          // This function adds the round key to state.
 226          // The round key is added to the state by an XOR function.
 227          void AddRoundKey(uint8_t round)
 228          {
 229   1        uint8_t i,j;
 230   1        for(i=0;i<4;++i)
 231   1        {
 232   2          for(j = 0; j < 4; ++j)
 233   2          {
 234   3            (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 235   3          }
 236   2        }
 237   1      }
 238          
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 5   

 239          // The SubBytes Function Substitutes the values in the
 240          // state matrix with values in an S-box.
 241          void SubBytes(void)
 242          {
 243   1        uint8_t i, j;
 244   1        for(i = 0; i < 4; ++i)
 245   1        {
 246   2          for(j = 0; j < 4; ++j)
 247   2          {
 248   3            (*state)[j][i] = getSBoxValue((*state)[j][i]);
 249   3          }
 250   2        }
 251   1      }
 252          
 253          // The ShiftRows() function shifts the rows in the state to the left.
 254          // Each row is shifted with different offset.
 255          // Offset = Row number. So the first row is not shifted.
 256          void ShiftRows(void)
 257          {
 258   1        uint8_t temp;
 259   1      
 260   1        // Rotate first row 1 columns to left  
 261   1        temp           = (*state)[0][1];
 262   1        (*state)[0][1] = (*state)[1][1];
 263   1        (*state)[1][1] = (*state)[2][1];
 264   1        (*state)[2][1] = (*state)[3][1];
 265   1        (*state)[3][1] = temp;
 266   1      
 267   1        // Rotate second row 2 columns to left  
 268   1        temp           = (*state)[0][2];
 269   1        (*state)[0][2] = (*state)[2][2];
 270   1        (*state)[2][2] = temp;
 271   1      
 272   1        temp       = (*state)[1][2];
 273   1        (*state)[1][2] = (*state)[3][2];
 274   1        (*state)[3][2] = temp;
 275   1      
 276   1        // Rotate third row 3 columns to left
 277   1        temp       = (*state)[0][3];
 278   1        (*state)[0][3] = (*state)[3][3];
 279   1        (*state)[3][3] = (*state)[2][3];
 280   1        (*state)[2][3] = (*state)[1][3];
 281   1        (*state)[1][3] = temp;
 282   1      }
 283          
 284          uint8_t xtime(uint8_t x)
 285          {
 286   1        return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 287   1      }
 288          
 289          // MixColumns function mixes the columns of the state matrix
 290          void MixColumns(void)
 291          {
 292   1        uint8_t i;
 293   1        uint8_t Tmp,Tm,t;
 294   1        for(i = 0; i < 4; ++i)
 295   1        {  
 296   2          t   = (*state)[i][0];
 297   2          Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 298   2          Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 299   2          Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 300   2          Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 6   

 301   2          Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 302   2        }
 303   1      }
 304          
 305          // Multiply is used to multiply numbers in the field GF(2^8)
 306          #if MULTIPLY_AS_A_FUNCTION
              static uint8_t Multiply(uint8_t x, uint8_t y)
              {
                return (((y & 1) * x) ^
                     ((y>>1 & 1) * xtime(x)) ^
                     ((y>>2 & 1) * xtime(xtime(x))) ^
                     ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^
                     ((y>>4 & 1) * xtime(xtime(xtime(xtime(x))))));
                }
              #else
 316          #define Multiply(x, y)                                \
 317                (  ((y & 1) * x) ^                              \
 318                ((y>>1 & 1) * xtime(x)) ^                       \
 319                ((y>>2 & 1) * xtime(xtime(x))) ^                \
 320                ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^         \
 321                ((y>>4 & 1) * xtime(xtime(xtime(xtime(x))))))   \
 322          
 323          #endif
 324          
 325          // MixColumns function mixes the columns of the state matrix.
 326          // The method used to multiply may be difficult to understand for the inexperienced.
 327          // Please use the references to gain more information.
 328          void InvMixColumns(void)
 329          {
 330   1        int i;
 331   1        uint8_t a,b,c,d;
 332   1        for(i=0;i<4;++i)
 333   1        { 
 334   2          a = (*state)[i][0];
 335   2          b = (*state)[i][1];
 336   2          c = (*state)[i][2];
 337   2          d = (*state)[i][3];
 338   2      
 339   2          (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 340   2          (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 341   2          (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 342   2          (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 343   2        }
 344   1      }
 345          
 346          
 347          // The SubBytes Function Substitutes the values in the
 348          // state matrix with values in an S-box.
 349          void InvSubBytes(void)
 350          {
 351   1        uint8_t i,j;
 352   1        for(i=0;i<4;++i)
 353   1        {
 354   2          for(j=0;j<4;++j)
 355   2          {
 356   3            (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 357   3          }
 358   2        }
 359   1      }
 360          
 361          void InvShiftRows(void)
 362          {
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 7   

 363   1        uint8_t temp;
 364   1      
 365   1        // Rotate first row 1 columns to right  
 366   1        temp=(*state)[3][1];
 367   1        (*state)[3][1]=(*state)[2][1];
 368   1        (*state)[2][1]=(*state)[1][1];
 369   1        (*state)[1][1]=(*state)[0][1];
 370   1        (*state)[0][1]=temp;
 371   1      
 372   1        // Rotate second row 2 columns to right 
 373   1        temp=(*state)[0][2];
 374   1        (*state)[0][2]=(*state)[2][2];
 375   1        (*state)[2][2]=temp;
 376   1      
 377   1        temp=(*state)[1][2];
 378   1        (*state)[1][2]=(*state)[3][2];
 379   1        (*state)[3][2]=temp;
 380   1      
 381   1        // Rotate third row 3 columns to right
 382   1        temp=(*state)[0][3];
 383   1        (*state)[0][3]=(*state)[1][3];
 384   1        (*state)[1][3]=(*state)[2][3];
 385   1        (*state)[2][3]=(*state)[3][3];
 386   1        (*state)[3][3]=temp;
 387   1      }
 388          
 389          
 390          // Cipher is the main function that encrypts the PlainText.
 391          static void Cipher(void)
 392          {
 393   1        uint8_t round = 0;
 394   1      
 395   1        // Add the First round key to the state before starting the rounds.
 396   1        AddRoundKey(0); 
 397   1        
 398   1        // There will be Nr rounds.
 399   1        // The first Nr-1 rounds are identical.
 400   1        // These Nr-1 rounds are executed in the loop below.
 401   1        for(round = 1; round < Nr; ++round)
 402   1        {
 403   2          SubBytes();
 404   2          ShiftRows();
 405   2          MixColumns();
 406   2          AddRoundKey(round);
 407   2        }
 408   1        
 409   1        // The last round is given below.
 410   1        // The MixColumns function is not here in the last round.
 411   1        SubBytes();
 412   1        ShiftRows();
 413   1        AddRoundKey(Nr);
 414   1      }
 415          
 416          void InvCipher(void)
 417          {
 418   1        uint8_t round=0;
 419   1      
 420   1        // Add the First round key to the state before starting the rounds.
 421   1        AddRoundKey(Nr); 
 422   1      
 423   1        // There will be Nr rounds.
 424   1        // The first Nr-1 rounds are identical.
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 8   

 425   1        // These Nr-1 rounds are executed in the loop below.
 426   1        for(round=Nr-1;round>0;round--)
 427   1        {
 428   2          InvShiftRows();
 429   2          InvSubBytes();
 430   2          AddRoundKey(round);
 431   2          InvMixColumns();
 432   2        }
 433   1        
 434   1        // The last round is given below.
 435   1        // The MixColumns function is not here in the last round.
 436   1        InvShiftRows();
 437   1        InvSubBytes();
 438   1        AddRoundKey(0);
 439   1      }
 440          
 441          void BlockCopy(uint8_t* output, const uint8_t* input)
 442          {
 443   1        uint8_t i;
 444   1        for (i=0;i<KEYLEN;++i)
 445   1        {
 446   2          output[i] = input[i];
 447   2        }
 448   1      }
 449          
 450          
 451          
 452          /*****************************************************************************/
 453          /* Public functions:                                                         */
 454          /*****************************************************************************/
 455          #if defined(ECB) && ECB
 456          
 457          
 458          void AES128_ECB_encrypt(const uint8_t* input, const uint8_t* key, uint8_t* output)
 459          {
 460   1        // Copy input to output, and work in-memory on output
 461   1        BlockCopy(output, input);
 462   1        state = (state_t*)output;
 463   1      
 464   1        Key = key;
 465   1        KeyExpansion();
 466   1      
 467   1        // The next function call encrypts the PlainText with the Key using AES algorithm.
 468   1        Cipher();
 469   1      }
 470          
 471          void AES128_ECB_decrypt(const uint8_t* input, const uint8_t* key, uint8_t *output)
 472          {
 473   1        // Copy input to output, and work in-memory on output
 474   1        BlockCopy(output, input);
 475   1        state = (state_t*)output;
 476   1      
 477   1        // The KeyExpansion routine must be called before encryption.
 478   1        Key = key;
 479   1        KeyExpansion();
 480   1      
 481   1        InvCipher();
 482   1      }
 483          
 484          
 485          #endif // #if defined(ECB) && ECB
 486          
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 9   

 487          
 488          
 489          
 490          
 491          #if defined(CBC) && CBC
 492          
 493          
 494          static void XorWithIv(uint8_t* buf)
 495          {
 496   1        uint8_t i;
 497   1        for(i = 0; i < KEYLEN; ++i)
 498   1        {
 499   2          buf[i] ^= Iv[i];
 500   2        }
 501   1      }
 502          
 503          void  AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, cons
             -t uint8_t* iv)
 504          {
 505   1        uint16_t i;
 506   1        uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
 507   1      
 508   1        BlockCopy(output, input);
 509   1        state = (state_t*)output;
 510   1      
 511   1        // Skip the key expansion if key is passed as 0
 512   1        if(0 != key)
 513   1        {
 514   2          Key = key;
 515   2          KeyExpansion();
 516   2        }
 517   1      
 518   1        if(iv != 0)
 519   1        {
 520   2          Iv = (uint8_t*)iv;
 521   2        }
 522   1      
 523   1        for(i = 0; i < length; i += KEYLEN)
 524   1        {
 525   2          XorWithIv(input);
 526   2          BlockCopy(output, input);
 527   2          state = (state_t*)output;
 528   2          Cipher();
 529   2          Iv = output;
 530   2          input += KEYLEN;
 531   2          output += KEYLEN;
 532   2        }
 533   1      
 534   1        if(remainders)
 535   1        {
 536   2          BlockCopy(output, input);
 537   2          memset(output + remainders, 0, KEYLEN - remainders); /* add 0-padding */
 538   2          state = (state_t*)output;
 539   2          Cipher();
 540   2        }
 541   1      }
 542          
 543          void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const
             - uint8_t* iv)
 544          {
 545   1        uint16_t i;
 546   1        uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
C51 COMPILER V9.01   AES                                                                   12/10/2018 09:41:52 PAGE 10  

 547   1        
 548   1        BlockCopy(output, input);
 549   1        state = (state_t*)output;
 550   1      
 551   1        // Skip the key expansion if key is passed as 0
 552   1        if(0 != key)
 553   1        {
 554   2          Key = key;
 555   2          KeyExpansion();
 556   2        }
 557   1      
 558   1        // If iv is passed as 0, we continue to encrypt without re-setting the Iv
 559   1        if(iv != 0)
 560   1        {
 561   2          Iv = (uint8_t*)iv;
 562   2        }
 563   1      
 564   1        for(i = 0; i < length; i += KEYLEN)
 565   1        {
 566   2          BlockCopy(output, input);
 567   2          state = (state_t*)output;
 568   2          InvCipher();
 569   2          XorWithIv(output);
 570   2          Iv = input;
 571   2          input += KEYLEN;
 572   2          output += KEYLEN;
 573   2        }
 574   1      
 575   1        if(remainders)
 576   1        {
 577   2          BlockCopy(output, input);
 578   2          memset(output+remainders, 0, KEYLEN - remainders); /* add 0-padding */
 579   2          state = (state_t*)output;
 580   2          InvCipher();
 581   2        }
 582   1      }
 583          
 584          
 585          #endif // #if defined(CBC) && CBC
 586          
 587          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3825    ----
   CONSTANT SIZE    =    767    ----
   XDATA SIZE       =    185     100
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
