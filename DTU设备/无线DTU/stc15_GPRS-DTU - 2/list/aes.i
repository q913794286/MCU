
#line 1 "app\service\AES128\aes.c" /0





























 
 
 
 
 
 
  
#line 1 "stdint.h" /0
 
 
 
 typedef unsigned char uint8_t;   
 typedef signed char int8_t;		   
 typedef unsigned short uint16_t;   
 typedef signed short int16_t;
 typedef unsigned long uint32_t;	   
 typedef signed long int32_t;
 
 
#line 36 "app\service\AES128\aes.c" /0
 
  
#line 1 "D:\KEIL_V5\C51\INC\STRING.H" /0






 
 
 
 
 
 
 
 typedef unsigned int size_t;
 
 
 
 
 
 
 #pragma SAVE
 #pragma REGPARMS
 extern char *strcat (char *s1, char *s2);
 extern char *strncat (char *s1, char *s2, int n);
 
 extern char strcmp (char *s1, char *s2);
 extern char strncmp (char *s1, char *s2, int n);
 
 extern char *strcpy (char *s1, char *s2);
 extern char *strncpy (char *s1, char *s2, int n);
 
 extern int strlen (char *);
 
 extern char *strchr (const char *s, char c);
 extern int strpos (const char *s, char c);
 extern char *strrchr (const char *s, char c);
 extern int strrpos (const char *s, char c);
 
 extern int strspn (char *s, char *set);
 extern int strcspn (char *s, char *set);
 extern char *strpbrk (char *s, char *set);
 extern char *strrpbrk (char *s, char *set);
 extern char *strstr  (char *s, char *sub);
 extern char *strtok  (char *str, const char *set);
 
 extern char memcmp (void *s1, void *s2, int n);
 extern void *memcpy (void *s1, void *s2, int n);
 extern void *memchr (void *s, char val, int n);
 extern void *memccpy (void *s1, void *s2, char val, int n);
 extern void *memmove (void *s1, void *s2, int n);
 extern void *memset  (void *s, char val, int n);
 #pragma RESTORE
 
 
#line 37 "app\service\AES128\aes.c" /0
 
  
#line 1 "APP\SERVICE\AES128\AES.H" /0
 
 
 
  
#line 1 "stdint.h" /0
 
#line 2 "stdint.h" /1
  
 
 
 
 
 
 
 
 
 
#line 4 "APP\SERVICE\AES128\AES.H" /0
#line 4 "APP\SERVICE\AES128\AES.H" /0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 void AES128_ECB_encrypt(const uint8_t* input, const uint8_t* key, uint8_t *output);
 void AES128_ECB_decrypt(const uint8_t* input, const uint8_t* key, uint8_t *output);
 
 
 
 
 
 
 void AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
 void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
 
 
 
 
 
 
#line 38 "app\service\AES128\aes.c" /0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 typedef uint8_t state_t[4][4];
 static state_t* state;
 
 
 static uint8_t RoundKey[176];
 
 
 static const uint8_t* Key;
 
 
 
 static uint8_t* Iv;
 
 
 
 
 
 const uint8_t code sbox[256] =   {
 
 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
 
 const uint8_t code rsbox[256] =
 { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
 
 
 
 
 
 const uint8_t code Rcon[255] = {
 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb  };
 
 
 
 
 
 uint8_t getSBoxValue(uint8_t num)
 {
 return sbox[num];
 }
 
 static uint8_t getSBoxInvert(uint8_t num)
 {
 return rsbox[num];
 }
 
 
 static void KeyExpansion(void)
 {
 uint32_t i, j, k;
 uint8_t tempa[4];  
 
 
 for(i = 0; i < 4; ++i)
 {
 RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 }
 
 
 for(; (i < (4 * (10 + 1))); ++i)
 {
 for(j = 0; j < 4; ++j)
 {
 tempa[j]=RoundKey[(i-1) * 4 + j];
 }
 if (i % 4 == 0)
 {
 
 
 
 
 {
 k = tempa[0];
 tempa[0] = tempa[1];
 tempa[1] = tempa[2];
 tempa[2] = tempa[3];
 tempa[3] = k;
 }
 
 
 
 
 
 {
 tempa[0] = getSBoxValue(tempa[0]);
 tempa[1] = getSBoxValue(tempa[1]);
 tempa[2] = getSBoxValue(tempa[2]);
 tempa[3] = getSBoxValue(tempa[3]);
 }
 
 tempa[0] =  tempa[0] ^ Rcon[i/4];
 }
 else if (4 > 6 && i % 4 == 4)
 {
 
 {
 tempa[0] = getSBoxValue(tempa[0]);
 tempa[1] = getSBoxValue(tempa[1]);
 tempa[2] = getSBoxValue(tempa[2]);
 tempa[3] = getSBoxValue(tempa[3]);
 }
 }
 RoundKey[i * 4 + 0] = RoundKey[(i - 4) * 4 + 0] ^ tempa[0];
 RoundKey[i * 4 + 1] = RoundKey[(i - 4) * 4 + 1] ^ tempa[1];
 RoundKey[i * 4 + 2] = RoundKey[(i - 4) * 4 + 2] ^ tempa[2];
 RoundKey[i * 4 + 3] = RoundKey[(i - 4) * 4 + 3] ^ tempa[3];
 }
 }
 
 
 
 void AddRoundKey(uint8_t round)
 {
 uint8_t i,j;
 for(i=0;i<4;++i)
 {
 for(j = 0; j < 4; ++j)
 {
 (*state)[i][j] ^= RoundKey[round * 4 * 4 + i * 4 + j];
 }
 }
 }
 
 
 
 void SubBytes(void)
 {
 uint8_t i, j;
 for(i = 0; i < 4; ++i)
 {
 for(j = 0; j < 4; ++j)
 {
 (*state)[j][i] = getSBoxValue((*state)[j][i]);
 }
 }
 }
 
 
 
 
 void ShiftRows(void)
 {
 uint8_t temp;
 
 
 temp           = (*state)[0][1];
 (*state)[0][1] = (*state)[1][1];
 (*state)[1][1] = (*state)[2][1];
 (*state)[2][1] = (*state)[3][1];
 (*state)[3][1] = temp;
 
 
 temp           = (*state)[0][2];
 (*state)[0][2] = (*state)[2][2];
 (*state)[2][2] = temp;
 
 temp       = (*state)[1][2];
 (*state)[1][2] = (*state)[3][2];
 (*state)[3][2] = temp;
 
 
 temp       = (*state)[0][3];
 (*state)[0][3] = (*state)[3][3];
 (*state)[3][3] = (*state)[2][3];
 (*state)[2][3] = (*state)[1][3];
 (*state)[1][3] = temp;
 }
 
 uint8_t xtime(uint8_t x)
 {
 return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 }
 
 
 void MixColumns(void)
 {
 uint8_t i;
 uint8_t Tmp,Tm,t;
 for(i = 0; i < 4; ++i)
 {  
 t   = (*state)[i][0];
 Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 }
 }
 
 
 
#line 307 "app\service\AES128\aes.c" /1
 
 
 
 
 
 
 
 
 
#line 316 "app\service\AES128\aes.c" /0
 






 
 
 
 
 
 void InvMixColumns(void)
 {
 int i;
 uint8_t a,b,c,d;
 for(i=0;i<4;++i)
 { 
 a = (*state)[i][0];
 b = (*state)[i][1];
 c = (*state)[i][2];
 d = (*state)[i][3];
 
 (*state)[i][0] = ( ((0x0e & 1) * a) ^ ((0x0e>>1 & 1) * xtime(a)) ^ ((0x0e>>2 & 1) * xtime(xtime(a))) ^ ((0x0e>>3 & 1) * xtime(xtime(xtime(a)))) ^ ((0x0e>>4 & 1) * xtime(xtime(xtime(xtime(a)))))) ^ ( ((0x0b & 1) * b) ^ ((0x0b>>1 & 1) * xtime(b)) ^ ((0x0b>>2 & 1) * xtime(xtime(b))) ^ ((0x0b>>3 & 1) * xtime(xtime(xtime(b)))) ^ ((0x0b>>4 & 1) * xtime(xtime(xtime(xtime(b)))))) ^ ( ((0x0d & 1) * c) ^ ((0x0d>>1 & 1) * xtime(c)) ^ ((0x0d>>2 & 1) * xtime(xtime(c))) ^ ((0x0d>>3 & 1) * xtime(xtime(xtime(c)))) ^ ((0x0d>>4 & 1) * xtime(xtime(xtime(xtime(c)))))) ^ ( ((0x09 & 1) * d) ^ ((0x09>>1 & 1) * xtime(d)) ^ ((0x09>>2 & 1) * xtime(xtime(d))) ^ ((0x09>>3 & 1) * xtime(xtime(xtime(d)))) ^ ((0x09>>4 & 1) * xtime(xtime(xtime(xtime(d))))));
 (*state)[i][1] = ( ((0x09 & 1) * a) ^ ((0x09>>1 & 1) * xtime(a)) ^ ((0x09>>2 & 1) * xtime(xtime(a))) ^ ((0x09>>3 & 1) * xtime(xtime(xtime(a)))) ^ ((0x09>>4 & 1) * xtime(xtime(xtime(xtime(a)))))) ^ ( ((0x0e & 1) * b) ^ ((0x0e>>1 & 1) * xtime(b)) ^ ((0x0e>>2 & 1) * xtime(xtime(b))) ^ ((0x0e>>3 & 1) * xtime(xtime(xtime(b)))) ^ ((0x0e>>4 & 1) * xtime(xtime(xtime(xtime(b)))))) ^ ( ((0x0b & 1) * c) ^ ((0x0b>>1 & 1) * xtime(c)) ^ ((0x0b>>2 & 1) * xtime(xtime(c))) ^ ((0x0b>>3 & 1) * xtime(xtime(xtime(c)))) ^ ((0x0b>>4 & 1) * xtime(xtime(xtime(xtime(c)))))) ^ ( ((0x0d & 1) * d) ^ ((0x0d>>1 & 1) * xtime(d)) ^ ((0x0d>>2 & 1) * xtime(xtime(d))) ^ ((0x0d>>3 & 1) * xtime(xtime(xtime(d)))) ^ ((0x0d>>4 & 1) * xtime(xtime(xtime(xtime(d))))));
 (*state)[i][2] = ( ((0x0d & 1) * a) ^ ((0x0d>>1 & 1) * xtime(a)) ^ ((0x0d>>2 & 1) * xtime(xtime(a))) ^ ((0x0d>>3 & 1) * xtime(xtime(xtime(a)))) ^ ((0x0d>>4 & 1) * xtime(xtime(xtime(xtime(a)))))) ^ ( ((0x09 & 1) * b) ^ ((0x09>>1 & 1) * xtime(b)) ^ ((0x09>>2 & 1) * xtime(xtime(b))) ^ ((0x09>>3 & 1) * xtime(xtime(xtime(b)))) ^ ((0x09>>4 & 1) * xtime(xtime(xtime(xtime(b)))))) ^ ( ((0x0e & 1) * c) ^ ((0x0e>>1 & 1) * xtime(c)) ^ ((0x0e>>2 & 1) * xtime(xtime(c))) ^ ((0x0e>>3 & 1) * xtime(xtime(xtime(c)))) ^ ((0x0e>>4 & 1) * xtime(xtime(xtime(xtime(c)))))) ^ ( ((0x0b & 1) * d) ^ ((0x0b>>1 & 1) * xtime(d)) ^ ((0x0b>>2 & 1) * xtime(xtime(d))) ^ ((0x0b>>3 & 1) * xtime(xtime(xtime(d)))) ^ ((0x0b>>4 & 1) * xtime(xtime(xtime(xtime(d))))));
 (*state)[i][3] = ( ((0x0b & 1) * a) ^ ((0x0b>>1 & 1) * xtime(a)) ^ ((0x0b>>2 & 1) * xtime(xtime(a))) ^ ((0x0b>>3 & 1) * xtime(xtime(xtime(a)))) ^ ((0x0b>>4 & 1) * xtime(xtime(xtime(xtime(a)))))) ^ ( ((0x0d & 1) * b) ^ ((0x0d>>1 & 1) * xtime(b)) ^ ((0x0d>>2 & 1) * xtime(xtime(b))) ^ ((0x0d>>3 & 1) * xtime(xtime(xtime(b)))) ^ ((0x0d>>4 & 1) * xtime(xtime(xtime(xtime(b)))))) ^ ( ((0x09 & 1) * c) ^ ((0x09>>1 & 1) * xtime(c)) ^ ((0x09>>2 & 1) * xtime(xtime(c))) ^ ((0x09>>3 & 1) * xtime(xtime(xtime(c)))) ^ ((0x09>>4 & 1) * xtime(xtime(xtime(xtime(c)))))) ^ ( ((0x0e & 1) * d) ^ ((0x0e>>1 & 1) * xtime(d)) ^ ((0x0e>>2 & 1) * xtime(xtime(d))) ^ ((0x0e>>3 & 1) * xtime(xtime(xtime(d)))) ^ ((0x0e>>4 & 1) * xtime(xtime(xtime(xtime(d))))));
 }
 }
 
 
 
 
 void InvSubBytes(void)
 {
 uint8_t i,j;
 for(i=0;i<4;++i)
 {
 for(j=0;j<4;++j)
 {
 (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 }
 }
 }
 
 void InvShiftRows(void)
 {
 uint8_t temp;
 
 
 temp=(*state)[3][1];
 (*state)[3][1]=(*state)[2][1];
 (*state)[2][1]=(*state)[1][1];
 (*state)[1][1]=(*state)[0][1];
 (*state)[0][1]=temp;
 
 
 temp=(*state)[0][2];
 (*state)[0][2]=(*state)[2][2];
 (*state)[2][2]=temp;
 
 temp=(*state)[1][2];
 (*state)[1][2]=(*state)[3][2];
 (*state)[3][2]=temp;
 
 
 temp=(*state)[0][3];
 (*state)[0][3]=(*state)[1][3];
 (*state)[1][3]=(*state)[2][3];
 (*state)[2][3]=(*state)[3][3];
 (*state)[3][3]=temp;
 }
 
 
 
 static void Cipher(void)
 {
 uint8_t round = 0;
 
 
 AddRoundKey(0); 
 
 
 
 
 for(round = 1; round < 10; ++round)
 {
 SubBytes();
 ShiftRows();
 MixColumns();
 AddRoundKey(round);
 }
 
 
 
 SubBytes();
 ShiftRows();
 AddRoundKey(10);
 }
 
 void InvCipher(void)
 {
 uint8_t round=0;
 
 
 AddRoundKey(10); 
 
 
 
 
 for(round=10-1;round>0;round--)
 {
 InvShiftRows();
 InvSubBytes();
 AddRoundKey(round);
 InvMixColumns();
 }
 
 
 
 InvShiftRows();
 InvSubBytes();
 AddRoundKey(0);
 }
 
 void BlockCopy(uint8_t* output, const uint8_t* input)
 {
 uint8_t i;
 for (i=0;i<16;++i)
 {
 output[i] = input[i];
 }
 }
 
 
 
 
 
 
 
 
 
 void AES128_ECB_encrypt(const uint8_t* input, const uint8_t* key, uint8_t* output)
 {
 
 BlockCopy(output, input);
 state = (state_t*)output;
 
 Key = key;
 KeyExpansion();
 
 
 Cipher();
 }
 
 void AES128_ECB_decrypt(const uint8_t* input, const uint8_t* key, uint8_t *output)
 {
 
 BlockCopy(output, input);
 state = (state_t*)output;
 
 
 Key = key;
 KeyExpansion();
 
 InvCipher();
 }
 
 
 
 
 
 
 
 
 
 
 
 static void XorWithIv(uint8_t* buf)
 {
 uint8_t i;
 for(i = 0; i < 16; ++i)
 {
 buf[i] ^= Iv[i];
 }
 }
 
 void  AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
 {
 uint16_t i;
 uint8_t remainders = length % 16;  
 
 BlockCopy(output, input);
 state = (state_t*)output;
 
 
 if(0 != key)
 {
 Key = key;
 KeyExpansion();
 }
 
 if(iv != 0)
 {
 Iv = (uint8_t*)iv;
 }
 
 for(i = 0; i < length; i += 16)
 {
 XorWithIv(input);
 BlockCopy(output, input);
 state = (state_t*)output;
 Cipher();
 Iv = output;
 input += 16;
 output += 16;
 }
 
 if(remainders)
 {
 BlockCopy(output, input);
 memset(output + remainders, 0, 16 - remainders);  
 state = (state_t*)output;
 Cipher();
 }
 }
 
 void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
 {
 uint16_t i;
 uint8_t remainders = length % 16;  
 
 BlockCopy(output, input);
 state = (state_t*)output;
 
 
 if(0 != key)
 {
 Key = key;
 KeyExpansion();
 }
 
 
 if(iv != 0)
 {
 Iv = (uint8_t*)iv;
 }
 
 for(i = 0; i < length; i += 16)
 {
 BlockCopy(output, input);
 state = (state_t*)output;
 InvCipher();
 XorWithIv(output);
 Iv = input;
 input += 16;
 output += 16;
 }
 
 if(remainders)
 {
 BlockCopy(output, input);
 memset(output+remainders, 0, 16 - remainders);  
 state = (state_t*)output;
 InvCipher();
 }
 }
 
 
 
 
 
